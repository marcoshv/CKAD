# =================================================================
# CKAD Exam Practice Questions (Definitive Final Version)
# =================================================================

- id: 1
  context: A deployment named `blue` (10 replicas) serves traffic in the `tiger` namespace. Create a canary deployment.
  tasks:
    - Create a new deployment named `main-app-v2` to serve a new version.
    - The new version should receive 30% of the traffic. The total number of replicas must remain 10.
    - This means you must scale the existing `blue` deployment to 7 replicas and create the new `main-app-v2` with 3 replicas.
    - The new deployment must use the image `viktoruj/ping_pong:latest` and have an environment variable `SERVER_NAME=appV2`.
    - Ensure the existing service `web-srv` routes traffic to both deployments.

- id: 2
  context: In the `ckad-netpol` namespace, the `frontend` pod is unable to connect to any other pods. Your task is to apply all the necessary labels to it to enable specific traffic flows.
  tasks:
    - There are four pods: `frontend`, `backend`, `database`, and `cache`.
    - There are several existing NetworkPolicies that you must not modify.
    - Inspect the existing policies to find the three labels that, when applied to the `frontend` pod, will grant it the following permissions:
    - 1. Permission to send any outgoing (egress) traffic.
    - 2. Permission to be accepted by the `backend` pod's ingress policy.
    - 3. Permission to be accepted by the `cache` pod's ingress policy.
    - Apply all three required labels to the `frontend` pod.

- id: 3
  context: A user reports they can't access an application at the URL `http://ckad.local:30102/app`. The manifests for the Pod, Service, and Ingress are provided in the `/opt/course/3/` directory.
  tasks:
    - Inspect the manifest files (`pod.yaml`, `service.yaml`, `ingress.yaml`) to find the source of the issue.
    - Fix the misconfiguration.
    - Apply the corrected manifests to deploy the application in the `external` namespace.
    - **Acceptance Criteria:** The solution will be validated by checking that a `curl` to the application URL is successful.

- id: 4
  context: A pod in `log-reader-deploy` (`dev` namespace) fails because its ServiceAccount (`log-reader-sa`) lacks permissions.
  tasks:
    - Create a Role `pod-reader-role` and RoleBinding `log-reader-binding`.
    - Grant the `log-reader-sa` ServiceAccount `get` and `list` permissions on `pods`.

- id: 5
  context: A Dockerfile is at `/opt/course/5/Dockerfile`. Podman is installed.
  tasks:
    - Build an image named `ckad` with tag `0.0.1`.
    - Export the image in `oci-archive` format to `/opt/course/5/ckad.tar`.

- id: 6
  context: The existing pod `probe-pod` needs health checks.
  tasks:
    - Add a `livenessProbe` that executes the command `ls /tmp/healthy`.
    - Add a `readinessProbe` that executes `touch /tmp/ready; cat /tmp/ready`.
    - Both probes should start after a 10-second delay and run every 60 seconds.

- id: 7
  context: The `pod-resources` namespace has a restrictive `ResourceQuota`.
  tasks:
    - Edit the quota to increase total `requests.cpu` to `1` and total `limits.memory` to `1Gi`.
    - Then create a pod `nginx-resources` with requests for `200m` CPU / `256Mi` memory and limits of `400m` CPU / `512Mi` memory.

- id: 8
  context: Update the `broker-deployment` in the `quetzal` namespace.
  tasks:
    - Configure its pods to run with user ID 5000 (`runAsUser`).
    - Forbid privilege escalation (`allowPrivilegeEscalation: false`).

- id: 9
  context: A manifest at `/opt/course/9/www.yaml` has a deprecated apiVersion.
  tasks:
    - Fix the API version and deploy it in the `cobra` namespace.

- id: 10
  context: Manage the rollout of `app-deployment` in the `kdpd00202` namespace.
  tasks:
    - Roll back the deployment to revision 1.
    - After the rollback, scale the deployment to 3 replicas.

- id: 11
  context: Create a complex CronJob in the `periodic-jobs` namespace.
  tasks:
    - Create a CronJob named `cron-job1`.
    - It must run every 15 minutes.
    - The Job must run to completion 3 times (`completions`).
    - Tolerate up to 4 pod failures (`backoffLimit`).
    - Use `concurrencyPolicy: Forbid`.
    - Keep history for the last 5 successful and 7 failed jobs.
    - Terminate the job if it runs longer than 10 seconds (`activeDeadlineSeconds`).
    - The container must use `viktoruj/ping_pong:alpine` with `imagePullPolicy: IfNotPresent` and run `echo "Hello from CKAD mock"`.

- id: 12
  context: Create a Job named `neb-new-job` in the `neptune` namespace.
  tasks:
    - Run `sleep 2 && echo done` with the `busybox:1.31.0` image.
    - The Job must have 3 completions and a parallelism of 2.

- id: 13
  context: Convert the Pod `holy-api` in `pluto` namespace to a Deployment.
  tasks:
    - Create a Deployment named `deployment-app-y` from the pod.
    - It should have 1 replica and an env var `SERVER_NAME=app-y`.
    - The container security context must set `allowPrivilegeEscalation: false` and `privileged: false`.
    - Delete the original Pod.

- id: 14
  context: You need to expose a pod, verify connectivity from within the cluster, and export its logs.
  tasks:
    - Expose the existing pod `app-14` in the `pluto` namespace with a `NodePort` Service named `service-14`.
    - The service should listen on port `8080` and target the container's port `80`.
    - Create a temporary `busybox` pod and use `wget` to access the service at `http://service-14.pluto:8080`. Save the output to `/opt/course/14/service.html`.
    - Export the logs of the `app-14` pod to `/opt/course/14/pod.log`.

- id: 15
  context: The `legacy-app` deployment in `mercury` has two containers (`app1`, `app2`). Add a sidecar to aggregate their logs.
  tasks:
    - The containers write to `/log/logs1.txt` and `/log/logs2.txt`.
    - Add a container `log-aggregator` (`busybox` image).
    - The three containers must share an `emptyDir` volume named `logs` mounted at `/log`. The volume must have a `sizeLimit` of `500Mi`.
    - The `log-aggregator` must run `tail -F /log/logs1.txt -F /log/logs2.txt`.

- id: 16
  context: Provide persistent storage to a Pod.
  tasks:
    - Create a `PersistentVolume` `pv-analytics` (100Mi, `ReadWriteOnce`, `hostPath: /pv/analytics`).
    - In `earth` namespace, create a `PersistentVolumeClaim` `pvc-analytics` requesting 100Mi.
    - Create a Pod `analytics` that mounts the PVC at `/pv/analytics`.
    - The pod must run on a node with the label `disk=ssd`.
    - The pod must have an `initContainer` (`busybox`) that writes "Initialized" to `/pv/analytics/init.txt`.

- id: 17
  context: A `NodePort` service `manager-api-svc` in `mars` is not working. It has two errors.
  tasks:
    - Troubleshoot and fix the selector mismatch.
    - Troubleshoot and fix the targetPort mismatch.

- id: 18
  context: A pod named `secret-pod` in the `dev-db` namespace has sensitive data hardcoded.
  tasks:
    - Create a new Secret named `db-credentials` in the `dev-db` namespace.
    - The secret must contain three keys: `user` (value: `admin`), `dbname` (value: `prod-db`), and `pass` (value: `supersecret123`).
    - Modify the `secret-pod` to remove the hardcoded environment variables.
    - Configure the pod to source its `DB_USER` env var from the `user` key of the new secret.
    - Configure the pod to source its `MYSQL_ROOT_PASSWORD` env var from the `pass` key.
    - Configure the pod to source its `DB_NAME` env var from the `dbname` key.

- id: 19
  context: In the `rbac-test-lab` namespace, grant permissions to a new `ServiceAccount`.
  tasks:
    - Create a `ServiceAccount` named `pod-sa`.
    - Create a `Role` `pod-sa-role` that allows `get` and `list` on `pods`.
    - Create a `RoleBinding` `pod-sa-roleBinding` to grant `pod-sa` the permissions from `pod-sa-role`.
    - Create a new Pod `rbac-test-pod` that uses this `pod-sa` ServiceAccount.

- id: 20
  context: You need to make a configuration file available to a new application.
  tasks:
    - Create a `ConfigMap` named `config` in the `config-test` namespace from the file `/opt/course/20/ingress_nginx_conf.yaml`.
    - Create a `Deployment` named `app-z` in the `config-test` namespace with 1 replica using the `viktoruj/ping_pong:alpine` image.
    - Mount the `config` ConfigMap as a volume to the path `/appConfig` in the deployment's container.